Projekt-Blueprint: Agentic RAG Business Assistant

1. Projektidee
    Wir bauen eine REST-basierte AI-Anwendung, die Dokumente (z. B. PDF-Berichte, interne Knowledge-Docs)
    verarbeiten und intelligente Antworten auf Fragen geben kann.
    Das System kombiniert Retrieval-Augmented Generation (RAG) mit Agentic AI, wodurch ein LLM
    selbstständig zwischen verschiedenen Tools entscheidet: Dokumentensuche (RAG), Web-Suche, 
    Berechnungen, etc. Die REST-API wird mit FastAPI entwickelt, LangChain dient als Framework für 
    RAG und Agenten, und FAISS wird für effiziente In-Memory Vektor-Suche verwendet. 
    Alles wird mittels Docker containerisiert.

2. Projektziele

    1. Dokumentenverwaltung: Dokumente hochladen, zerlegen (Chunking) und als Embeddings speichern.
    2. Frage-Antwort-System: Fragen zu Dokumenten mithilfe von RAG beantworten.
    3. Agentic Layer: AI-Agent entscheidet zwischen mehreren Tools (z. B. RAG oder externe APIs).
    4. REST-API Endpoints:
    - /health - Systemstatus
    - /ingest - Dokumente hochladen
    - /query - Frage stellen
    - /agent - Agentic-Antwort (mit Toolauswahl)
    5. Testdaten: Nutzung von Beispiel-PDFs (Business-Reports oder technische Dokumentation).

3. Benötigte Komponenten
    Software & Tools:
    - Python 3.11+
    - FastAPI (REST-API)
    - LangChain + LangChain Agents (für RAG, Tools, Agenten)
    - FAISS (effiziente In-Memory Vektor-Suche)
    - sentence-transformers (lokale Embeddings)
    - Docker & docker-compose (Containerisierung)
    - OpenAI API (LLM für Agent Reasoning)
    - Tavily API (Web Search Tool - optional)
    Infrastruktur:
    - 1 Haupt-Container: API (FastAPI + LangChain + FAISS)
    - Optional: PostgreSQL Container (nur für Metadaten)
    - Lokale Entwicklungsumgebung (VSCode oder PyCharm)
    - API-Testtool wie Postman oder cURL
    Testdaten:
    - Beispiel-PDFs (Business-Report oder technische Dokumentation)

4. Architekturüberblick - Agentic RAG System
    Das System folgt einem intelligenten Agenten-Aufbau:
    
    [User Query] -> [FastAPI Backend] -> [LangChain Agent] -> Tool-Auswahl:
                                            ├── RAG Tool (FAISS Vector Search)
                                            ├── Web Search Tool (Tavily API)
                                            ├── Calculator Tool
                                            └── Custom Business Tools
    
    Der Agent (OpenAI Function Calling) entscheidet intelligent, welche Tools für welche 
    Anfrage optimal sind und kombiniert die Ergebnisse zu einer kohärenten Antwort.
    5. Schritt-für-Schritt-Plan
    Phase 1: Planung & Setup
    - Projektstruktur festlegen (Ordner, Module, Dockerfiles).
    - docker-compose mit FastAPI & Postgres aufsetzen.
    - Testdaten (PDFs) auswählen.
    Phase 2: Backend-Basis (FastAPI)
    - FastAPI-Server einrichten.
    - Endpunkte definieren: /health, /ingest, /query.
    Phase 3: Vector Service (FAISS)
    - FAISS In-Memory Vector Store implementieren.
    - LangChain RecursiveCharacterTextSplitter für intelligentes Chunking.
    - sentence-transformers für lokale Embeddings.
    Phase 4: RAG-Tools Implementation  
    - @tool decorator für RAG-Funktionalität.
    - FAISS Similarity Search als Tool.
    - Retriever mit Top-K Chunks und Similarity Threshold.
    Phase 5: Agentic Layer (Kern-Feature)
    - LangChain Agent mit OpenAI Function Calling.
    - Multiple Tools: RAG, Web Search, Calculator.
    - Agent Service für intelligente Tool-Auswahl.
    - /agent Endpoint für agentic Queries.
    Phase 6: Testing & Monitoring
    - Testfälle für Dokumente und Fragen.
    - Optional: Integration von Langfuse (Monitoring).
    Phase 7: Erweiterungen (optional)
    - Frontend: Weboberfläche (Streamlit/React).
    - Deployment: Cloud-Hosting (z. B. Render oder später Azure/AWS).

6. Endziel
    Ein vollständig containerisiertes AI-System mit FastAPI, LangChain und pgvector, das Fragen zu
    Dokumenten beantwortet und agentische Fähigkeiten besitzt. Das Projekt ist modular erweiterbar und für
    Business-Anwendungen optimiert.

## 🏗️ **Phase 1: Projektstruktur & Setup**

Lassen Sie uns mit dem **wichtigsten ersten Schritt** beginnen: **Die richtige Projektstruktur anlegen**.

### 🎯 **Was wir jetzt machen werden:**

**Ziel:** Eine saubere, professionelle Ordnerstruktur erstellen, die mit Ihrem Projekt wächst.

### 📁 **Die Projektstruktur, die Sie anlegen sollten:**

```
agentic-rag-assistant/           # Hauptordner
├── api/                         # FastAPI Backend Code
│   ├── __init__.py
│   ├── main.py                  # FastAPI App Entry Point
│   ├── models/                  # Datenbank Models
│   │   ├── __init__.py
│   │   └── document.py
│   ├── routes/                  # API Endpoints
│   │   ├── __init__.py
│   │   ├── health.py           # /health endpoint
│   │   ├── ingest.py           # /ingest endpoint  
│   │   ├── query.py            # /query endpoint
│   │   └── agent.py            # /agent endpoint
│   ├── services/               # Business Logic
│   │   ├── __init__.py
│   │   ├── rag_service.py      # RAG Implementation
│   │   ├── vector_service.py   # Vector Database
│   │   └── agent_service.py    # LangChain Agent
│   └── utils/                  # Hilfsfunktionen
│       ├── __init__.py
│       └── document_processor.py
├── docker-compose.yml          # Container Orchestrierung
├── Dockerfile                  # API Container Definition
├── requirements.txt            # Python Dependencies
├── .env                        # Umgebungsvariablen
├── .gitignore                  # Git Ignore File
├── README.md                   # Projektdokumentation
└── test_documents/             # PDF Test-Dateien
    ├── business_report.pdf
    └── technical_docs.pdf
```

## 🤔 **Warum diese Struktur?**

### **1. Separation of Concerns:**
- **`routes/`:** Nur HTTP-Request Handling
- **`services/`:** Echte Business-Logik (RAG, Agents)
- **`models/`:** Datenbank-Definitionen
- **`utils/`:** Wiederverwendbare Hilfsfunktionen

### **2. Skalierbarkeit:**
- Neue Features → Neue Service-Datei
- Neue Endpoints → Neue Route-Datei
- **Wird nie unübersichtlich!**

### **3. Testing-Friendly:**
- Jede Komponente isoliert testbar
- Mocking wird einfach
- **Clean Architecture Prinzipien**

### **4. Docker-Ready:**
- `Dockerfile` im Root für einfachen Build
- `docker-compose.yml` orchestriert alles
- **Production-deployment ready**

---

## 🎯 **Ihr nächster Schritt:**

**Legen Sie diese Ordnerstruktur an!** 

### **Wie Sie vorgehen:**

1. **Hauptordner erstellen:** `agentic-rag-assistant/`
2. **Alle Unterordner anlegen** (siehe Struktur oben)
3. **`__init__.py` Dateien** in jeden Python-Ordner (macht sie zu Modulen)
4. **Leere `.py` Dateien** erstellen (werden wir später füllen)

### **Was Sie dabei lernen:**
- **Python Package Structure:** Warum `__init__.py`?
- **Project Organization:** Wie echte Projekte strukturiert sind
- **Dependency Management:** Warum `requirements.txt`?

---

## ❓ **Fragen zum Verständnis:**

**Bevor Sie anfangen:**

1. **Verstehen Sie, warum wir die Logik in `services/` und nicht in `routes/` machen?**
   
2. **Warum separate Dateien für jeden Endpoint?**

3. **Was ist der Unterschied zwischen `models/` und `services/`?**

---

## 🚀 **Nach der Struktur:**

Sobald Sie die Ordnerstruktur haben, zeige ich Ihnen:
- **Was in jede Datei gehört** (konzeptionell)
- **Wie Docker die Struktur nutzt**
- **Wie wir requirements.txt aufbauen**

**Sind Sie bereit, die Struktur anzulegen? Oder haben Sie Fragen zur Organisation? Soll ich einen Punkt genauer erklären?**

**Tipp:** Fangen Sie einfach an - das Verstehen kommt beim Machen! 💪